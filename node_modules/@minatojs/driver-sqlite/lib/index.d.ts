import { Builder } from '@minatojs/sql-utils';
import { Dict } from 'cosmokit';
import { Field, Model, Driver, Eval, Selection, z } from 'minato';
import init from '@minatojs/sql.js';
export class SQLiteBuilder extends Builder {
    protected escapeMap: {
        "'": string;
    };
    constructor(tables?: Dict<Model>);
    escape(value: any, field?: Field): string;
    protected createElementQuery(key: string, value: any): string;
    protected jsonLength(value: string): string;
    protected jsonContains(obj: string, value: string): string;
    protected jsonUnquote(value: string, pure?: boolean): string;
    protected createAggr(expr: any, aggr: (value: string) => string, nonaggr?: (value: string) => string): string;
    protected groupArray(value: string): string;
    protected transformJsonField(obj: string, path: string): string;
}
export interface SQLiteFieldInfo {
    cid: number;
    name: string;
    type: string;
    notnull: number;
    dflt_value: string;
    pk: boolean;
}
export class SQLiteDriver extends Driver<SQLiteDriver.Config> {
    #private;
    static name: string;
    db: init.Database;
    sql: SQLiteBuilder;
    beforeUnload?: () => void;
    private _transactionTask?;
    /** synchronize table schema */
    prepare(table: string, dropKeys?: string[]): Promise<void>;
    start(): Promise<void>;
    stop(): Promise<void>;
    drop(table: string): Promise<void>;
    dropAll(): Promise<void>;
    stats(): Promise<Driver.Stats>;
    remove(sel: Selection.Mutable): Promise<{
        matched?: undefined;
        removed?: undefined;
    } | {
        matched: any;
        removed: any;
    }>;
    get(sel: Selection.Immutable): Promise<any>;
    eval(sel: Selection.Immutable, expr: Eval.Expr): Promise<any>;
    set(sel: Selection.Mutable, update: {}): Promise<{
        matched: number;
        modified: number;
    }>;
    create(sel: Selection.Mutable, data: {}): Promise<any>;
    upsert(sel: Selection.Mutable, data: any[], keys: string[]): Promise<{}>;
    withTransaction(callback: (session: this) => Promise<void>): Promise<void>;
}
export namespace SQLiteDriver {
    interface Config {
        path: string;
    }
    const Config: z<Config>;
}
export default SQLiteDriver;
