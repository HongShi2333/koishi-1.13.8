import { Database, Driver, Eval, Selection } from '@minatojs/core';
import { Builder } from '@minatojs/sql-utils';
import init from '@minatojs/sql.js';
export interface SQLiteFieldInfo {
    cid: number;
    name: string;
    type: string;
    notnull: number;
    dflt_value: string;
    pk: boolean;
}
export declare namespace SQLiteDriver {
    interface Config {
        path: string;
    }
}
export declare class SQLiteDriver extends Driver {
    #private;
    config: SQLiteDriver.Config;
    db: init.Database;
    sql: Builder;
    beforeUnload?: () => void;
    private _transactionTask?;
    constructor(database: Database, config: SQLiteDriver.Config);
    /** synchronize table schema */
    prepare(table: string, dropKeys?: string[]): Promise<void>;
    start(): Promise<void>;
    stop(): Promise<void>;
    drop(table?: string): Promise<any>;
    stats(): Promise<Driver.Stats>;
    remove(sel: Selection.Mutable): Promise<{
        matched?: undefined;
        removed?: undefined;
    } | {
        matched: any;
        removed: any;
    }>;
    get(sel: Selection.Immutable): Promise<any>;
    eval(sel: Selection.Immutable, expr: Eval.Expr): Promise<any>;
    set(sel: Selection.Mutable, update: {}): Promise<{
        matched: number;
        modified: number;
    }>;
    create(sel: Selection.Mutable, data: {}): Promise<any>;
    upsert(sel: Selection.Mutable, data: any[], keys: string[]): Promise<{}>;
    withTransaction(callback: (session: Driver) => Promise<void>): Promise<void>;
}
export default SQLiteDriver;
