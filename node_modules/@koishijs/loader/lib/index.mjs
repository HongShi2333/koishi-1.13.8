var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});

// koishi/packages/loader/src/index.ts
import { Logger } from "@koishijs/core";
import { promises as fs } from "fs";
import * as dotenv from "dotenv";
import ns from "ns-require";
import Loader from "./shared.mjs";
export * from "./shared.mjs";
var logger = new Logger("app");
for (const key in __require.extensions) {
  Loader.extensions.add(key);
}
var initialKeys = Object.getOwnPropertyNames(process.env);
var NodeLoader = class extends Loader {
  static {
    __name(this, "NodeLoader");
  }
  scope;
  localKeys = [];
  async init(filename) {
    await super.init(filename);
    this.scope = ns({
      namespace: "koishi",
      prefix: "plugin",
      official: "koishijs",
      dirname: this.baseDir
    });
  }
  async migrate() {
    if (this.config["port"]) {
      const { port, host, maxPort, selfUrl } = this.config;
      delete this.config["port"];
      delete this.config["host"];
      delete this.config["maxPort"];
      delete this.config["selfUrl"];
      this.config.plugins = {
        server: { port, host, maxPort, selfUrl },
        ...this.config.plugins
      };
      try {
        const version = __require("koishi/package.json").dependencies["@koishijs/plugin-server"];
        const data = JSON.parse(await fs.readFile("package.json", "utf8"));
        data.dependencies["@koishijs/plugin-server"] = version;
        data.dependencies = Object.fromEntries(Object.entries(data.dependencies).sort(([a], [b]) => a.localeCompare(b)));
        await fs.writeFile("package.json", JSON.stringify(data, null, 2) + "\n");
      } catch {
        logger.warn("please install @koishijs/plugin-server manually");
      }
    }
    await super.migrate();
  }
  async readConfig(initial = false) {
    for (const key of this.localKeys) {
      delete process.env[key];
    }
    const parsed = {};
    for (const filename of this.envFiles) {
      try {
        const raw = await fs.readFile(filename, "utf8");
        Object.assign(parsed, dotenv.parse(raw));
      } catch {
      }
    }
    this.localKeys = [];
    for (const key in parsed) {
      if (initialKeys.includes(key))
        continue;
      process.env[key] = parsed[key];
      this.localKeys.push(key);
    }
    return await super.readConfig(initial);
  }
  async import(name) {
    try {
      this.cache[name] ||= this.scope.resolve(name);
    } catch (err) {
      logger.error(err.message);
      return;
    }
    return __require(this.cache[name]);
  }
  fullReload(code = Loader.exitCode) {
    const body = JSON.stringify(this.envData);
    process.send({ type: "shared", body }, (err) => {
      if (err)
        logger.error("failed to send shared data");
      logger.info("trigger full reload");
      process.exit(code);
    });
  }
};
export {
  NodeLoader as default
};
//# sourceMappingURL=index.mjs.map
