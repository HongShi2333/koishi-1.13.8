var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// external/webui/plugins/notifier/src/index.ts
var src_exports = {};
__export(src_exports, {
  Notifier: () => Notifier,
  default: () => src_default
});
module.exports = __toCommonJS(src_exports);
var import_koishi = require("koishi");
var import_path = require("path");
var import_meta = {};
var _Notifier = class _Notifier {
  constructor(ctx, options) {
    this.ctx = ctx;
    var _a;
    this.options = {
      type: "primary",
      content: []
    };
    ctx.notifier.store.push(this);
    this.update(options);
    (_a = ctx.notifier.entry) == null ? void 0 : _a.refresh();
    this.dispose = ctx.collect("entry", () => {
      var _a2;
      this.clearActions();
      (0, import_koishi.remove)(ctx.notifier.store, this);
      (_a2 = ctx.notifier.entry) == null ? void 0 : _a2.refresh();
    });
  }
  options;
  dispose;
  actionKeys = [];
  clearActions() {
    for (const key of this.actionKeys) {
      delete this.ctx.notifier.actions[key];
    }
    this.actionKeys = [];
  }
  update(options) {
    var _a;
    if (typeof options === "string" || import_koishi.h.isElement(options) || Array.isArray(options)) {
      options = { content: options };
    }
    if (!(0, import_koishi.isNullable)(options == null ? void 0 : options.content)) {
      this.clearActions();
      const content = typeof options.content === "string" ? [(0, import_koishi.h)("p", options.content)] : import_koishi.h.toElementArray(options.content);
      options.content = import_koishi.h.transform(content, ({ type, attrs }) => {
        if (type === "button" && typeof attrs.onClick === "function") {
          const key = Math.random().toString(36).slice(2);
          this.ctx.notifier.actions[key] = attrs.onClick;
          this.actionKeys.push(key);
          attrs.onClick = key;
        }
        return true;
      });
    }
    Object.assign(this.options, options);
    (_a = this.ctx.notifier.entry) == null ? void 0 : _a.refresh();
  }
  toJSON() {
    var _a;
    return {
      ...this.options,
      content: this.options.content.join(""),
      paths: (_a = this.ctx.get("loader")) == null ? void 0 : _a.paths(this.ctx.scope)
    };
  }
};
__name(_Notifier, "Notifier");
var Notifier = _Notifier;
var _NotifierService = class _NotifierService extends import_koishi.Service {
  constructor(ctx, config) {
    super(ctx, "notifier", true);
    this.config = config;
    ctx.inject(["console"], (ctx2) => {
      ctx2.on("dispose", () => this.entry = void 0);
      this.entry = ctx2.console.addEntry(process.env.KOISHI_BASE ? [
        process.env.KOISHI_BASE + "/dist/index.js",
        process.env.KOISHI_BASE + "/dist/style.css"
      ] : process.env.KOISHI_ENV === "browser" ? [
        // @ts-ignore
        import_meta.url.replace(/\/src\/[^/]+$/, "/client/index.ts")
      ] : {
        dev: (0, import_path.resolve)(__dirname, "../client/index.ts"),
        prod: (0, import_path.resolve)(__dirname, "../dist")
      }, () => ({
        notifiers: this.store.map((notifier) => notifier.toJSON())
      }));
      ctx2.console.addListener("notifier/button", (id) => {
        return this.actions[id]();
      });
    });
  }
  store = [];
  actions = /* @__PURE__ */ Object.create(null);
  entry;
  message(options) {
    if (typeof options === "string") {
      options = { content: options };
    }
    options.type || (options.type = "primary");
    this.ctx.get("console").broadcast("notifier/message", options);
  }
  create(options) {
    return new Notifier(this[import_koishi.Context.current], options);
  }
};
__name(_NotifierService, "NotifierService");
var NotifierService = _NotifierService;
((NotifierService2) => {
  NotifierService2.Config = import_koishi.Schema.object({});
})(NotifierService || (NotifierService = {}));
var src_default = NotifierService;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Notifier
});
//# sourceMappingURL=index.cjs.map
