import { Context, Dict, Schema } from 'koishi';
import { DependencyMetaKey, RemotePackage } from '@koishijs/registry';
import { DependencyProvider, RegistryProvider } from './deps';
import Installer from './installer';
import MarketProvider from './market';
export * from '../shared';
export { Installer };
declare module 'koishi' {
    interface Context {
        installer: Installer;
    }
}
declare module '@koishijs/console' {
    namespace Console {
        interface Services {
            dependencies: DependencyProvider;
            registry: RegistryProvider;
        }
    }
    interface Events {
        'market/install'(deps: Dict<string>, forced?: boolean): Promise<number>;
        'market/registry'(names: string[]): Promise<Dict<Dict<Pick<RemotePackage, DependencyMetaKey>>>>;
    }
}
export declare const name = "market";
export declare const inject: string[];
export interface Config {
    registry?: Installer.Config;
    search?: MarketProvider.Config;
}
export declare const Config: Schema<Config>;
export declare function apply(ctx: Context, config: Config): void;
