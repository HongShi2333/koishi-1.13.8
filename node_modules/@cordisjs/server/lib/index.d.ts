/// <reference types="node" />
/// <reference types="koa__router" />
import { Context } from 'cordis';
import { MaybeArray } from 'cosmokit';
import { IncomingMessage, Server } from 'http';
import { WebSocket, WebSocketServer } from 'ws';
import Schema from 'schemastery';
import KoaRouter from '@koa/router';
declare module 'koa' {
    interface Request {
        body?: any;
        rawBody?: string;
    }
}
declare module 'cordis' {
    interface Context {
        server: Router;
        /** @deprecated use `ctx.server` instead */
        router: Router;
    }
    interface Events {
        'server/ready'(this: Router): void;
    }
}
type WebSocketCallback = (socket: WebSocket, request: IncomingMessage) => void;
export declare class WebSocketLayer {
    private server;
    callback?: WebSocketCallback | undefined;
    clients: Set<WebSocket>;
    regexp: RegExp;
    constructor(server: Router, path: MaybeArray<string | RegExp>, callback?: WebSocketCallback | undefined);
    accept(socket: WebSocket, request: IncomingMessage): true | undefined;
    close(): void;
}
export interface Router extends Context.Associate<'server'> {
}
export declare class Router extends KoaRouter {
    protected ctx: Context;
    config: Router.Config;
    _http: Server;
    _ws: WebSocketServer;
    wsStack: WebSocketLayer[];
    host: string;
    port: number;
    private logger;
    constructor(ctx: Context, config: Router.Config);
    [Context.filter](ctx: Context): boolean;
    get selfUrl(): string;
    /**
     * hack into router methods to make sure that koa middlewares are disposable
     */
    register(...args: Parameters<KoaRouter['register']>): KoaRouter.Layer;
    ws(path: MaybeArray<string | RegExp>, callback?: WebSocketCallback): WebSocketLayer;
}
export declare namespace Router {
    interface Config {
        host: string;
        port: number;
        maxPort?: number;
        selfUrl?: string;
    }
    const Config: Schema<Config>;
}
export default Router;
