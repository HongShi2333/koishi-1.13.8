"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// cordis/std/packages/logger/src/index.ts
var src_exports = {};
__export(src_exports, {
  Logger: () => import_reggol.default,
  apply: () => apply
});
module.exports = __toCommonJS(src_exports);
var import_cordis = require("cordis");
var import_reggol = __toESM(require("reggol"), 1);
function apply(ctx) {
  var _a;
  ctx.root.baseDir = ((_a = globalThis.process) == null ? void 0 : _a.cwd()) || "";
  ctx.provide("logger", void 0, true);
  ctx.logger = function(name) {
    return new import_reggol.default(name, { [import_cordis.Context.current]: this });
  };
  ctx.on("internal/error", function(format, ...args) {
    this.logger("app").error(format, ...args);
  });
  ctx.on("internal/warning", function(format, ...args) {
    this.logger("app").warn(format, ...args);
  });
}
__name(apply, "apply");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Logger,
  apply
});
