var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// satori/packages/satori/src/index.ts
import { Quester } from "@satorijs/core";
import { base64ToArrayBuffer } from "cosmokit";
import { WebSocket } from "ws";
import { basename } from "path";
import { promises as fs } from "fs";
import { fileURLToPath } from "url";
import FileType from "file-type";
import { HttpProxyAgent } from "http-proxy-agent";
import { HttpsProxyAgent } from "https-proxy-agent";
import { SocksProxyAgent } from "socks-proxy-agent";
export * from "@satorijs/core";
export * from "cosmokit";
var oldFile = Quester.prototype.file;
Quester.prototype.file = /* @__PURE__ */ __name(async function file(url) {
  if (url.startsWith("base64://")) {
    const data = base64ToArrayBuffer(url.slice(9));
    const result = await FileType.fromBuffer(data);
    const filename = "file" + (result ? "." + result.ext : "");
    return { mime: result?.mime, filename, data };
  }
  if (url.startsWith("file://")) {
    const data = await fs.readFile(fileURLToPath(url));
    const result = await FileType.fromBuffer(data);
    return { mime: result?.mime, filename: basename(url), data };
  }
  return oldFile.call(this, url);
}, "file");
Quester.prototype.ws = /* @__PURE__ */ __name(function ws(url, options = {}) {
  return new WebSocket(this.resolve(url), {
    agent: this.agent(this.config.proxyAgent),
    handshakeTimeout: this.config.timeout,
    ...options,
    headers: {
      ...this.config.headers,
      ...options.headers
    }
  });
}, "ws");
var _prepare = Quester.prototype.prepare;
Quester.prototype.prepare = /* @__PURE__ */ __name(function prepare() {
  const options = _prepare.call(this);
  options.httpAgent = this.agent(this.config.proxyAgent);
  options.httpsAgent = this.agent(this.config.proxyAgent);
  return options;
}, "prepare");
Quester.defineAgent(["http"], HttpProxyAgent);
Quester.defineAgent(["https"], HttpsProxyAgent);
Quester.defineAgent(["socks", "socks4", "socks4a", "socks5", "socks5h"], SocksProxyAgent);
//# sourceMappingURL=index.mjs.map
