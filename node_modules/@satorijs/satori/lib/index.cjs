var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// satori/packages/satori/src/index.ts
var src_exports = {};
module.exports = __toCommonJS(src_exports);
var import_core = require("@satorijs/core");
var import_cosmokit = require("cosmokit");
var import_ws = require("ws");
var import_path = require("path");
var import_fs = require("fs");
var import_url = require("url");
var import_file_type = __toESM(require("file-type"), 1);
var import_http_proxy_agent = require("http-proxy-agent");
var import_https_proxy_agent = require("https-proxy-agent");
var import_socks_proxy_agent = require("socks-proxy-agent");
__reExport(src_exports, require("@satorijs/core"), module.exports);
__reExport(src_exports, require("cosmokit"), module.exports);
var oldFile = import_core.Quester.prototype.file;
import_core.Quester.prototype.file = /* @__PURE__ */ __name(async function file(url) {
  if (url.startsWith("base64://")) {
    const data = (0, import_cosmokit.base64ToArrayBuffer)(url.slice(9));
    const result = await import_file_type.default.fromBuffer(data);
    const filename = "file" + (result ? "." + result.ext : "");
    return { mime: result == null ? void 0 : result.mime, filename, data };
  }
  if (url.startsWith("file://")) {
    const data = await import_fs.promises.readFile((0, import_url.fileURLToPath)(url));
    const result = await import_file_type.default.fromBuffer(data);
    return { mime: result == null ? void 0 : result.mime, filename: (0, import_path.basename)(url), data };
  }
  return oldFile.call(this, url);
}, "file");
import_core.Quester.prototype.ws = /* @__PURE__ */ __name(function ws(url, options = {}) {
  return new import_ws.WebSocket(this.resolve(url), {
    agent: this.agent(this.config.proxyAgent),
    handshakeTimeout: this.config.timeout,
    ...options,
    headers: {
      ...this.config.headers,
      ...options.headers
    }
  });
}, "ws");
var _prepare = import_core.Quester.prototype.prepare;
import_core.Quester.prototype.prepare = /* @__PURE__ */ __name(function prepare() {
  const options = _prepare.call(this);
  options.httpAgent = this.agent(this.config.proxyAgent);
  options.httpsAgent = this.agent(this.config.proxyAgent);
  return options;
}, "prepare");
import_core.Quester.defineAgent(["http"], import_http_proxy_agent.HttpProxyAgent);
import_core.Quester.defineAgent(["https"], import_https_proxy_agent.HttpsProxyAgent);
import_core.Quester.defineAgent(["socks", "socks4", "socks4a", "socks5", "socks5h"], import_socks_proxy_agent.SocksProxyAgent);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ...require("@satorijs/core"),
  ...require("cosmokit")
});
//# sourceMappingURL=index.cjs.map
