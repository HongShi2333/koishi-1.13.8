/// <reference types="node" />
/// <reference types="node" />
import { Context, Dict, Schema } from '@satorijs/satori';
import internal from 'stream';
declare module '@satorijs/core' {
    interface Context {
        'server.temp': TempServer;
    }
}
export interface Entry {
    path: string;
    url: string;
    dispose?: () => void;
}
declare class TempServer {
    protected ctx: Context;
    config: TempServer.Config;
    static inject: string[];
    path: string;
    selfUrl: string;
    baseDir: string;
    entries: Dict<Entry>;
    constructor(ctx: Context, config: TempServer.Config);
    start(): Promise<void>;
    stop(): Promise<void>;
    create(data: string | Buffer | internal.Readable): Promise<Entry>;
}
declare namespace TempServer {
    interface Config {
        path: string;
        selfUrl?: string;
        maxAge?: number;
    }
    const Config: Schema<Config>;
}
export default TempServer;
