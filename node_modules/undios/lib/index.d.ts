import { Context, Service } from 'cordis';
import { Awaitable, Dict } from 'cosmokit';
import { ClientOptions } from 'ws';
export type { WebSocket } from 'undios/adapter';
declare module 'cordis' {
    interface Context {
        http: HTTP;
    }
    interface Intercept {
        http: HTTP.Config;
    }
    interface Events {
        'http/config'(config: HTTP.Config): void;
        'http/fetch-init'(url: URL, init: RequestInit, config: HTTP.Config): void;
        'http/websocket-init'(url: URL, init: ClientOptions, config: HTTP.Config): void;
    }
}
declare const kHTTPError: unique symbol;
declare class HTTPError extends Error {
    code?: "ETIMEDOUT" | undefined;
    [kHTTPError]: boolean;
    response?: HTTP.Response;
    static is(error: any): error is HTTPError;
    constructor(message?: string, code?: "ETIMEDOUT" | undefined);
}
export declare namespace HTTP {
    type Method = 'get' | 'GET' | 'delete' | 'DELETE' | 'head' | 'HEAD' | 'options' | 'OPTIONS' | 'post' | 'POST' | 'put' | 'PUT' | 'patch' | 'PATCH' | 'purge' | 'PURGE' | 'link' | 'LINK' | 'unlink' | 'UNLINK';
    interface ResponseTypes {
        json: any;
        text: string;
        stream: ReadableStream<Uint8Array>;
        blob: Blob;
        formdata: FormData;
        arraybuffer: ArrayBuffer;
    }
    interface Request1 {
        <K extends keyof ResponseTypes>(url: string, config: HTTP.RequestConfig & {
            responseType: K;
        }): Promise<ResponseTypes[K]>;
        <T = any>(url: string, config?: HTTP.RequestConfig): Promise<T>;
    }
    interface Request2 {
        <K extends keyof ResponseTypes>(url: string, data: any, config: HTTP.RequestConfig & {
            responseType: K;
        }): Promise<ResponseTypes[K]>;
        <T = any>(url: string, data?: any, config?: HTTP.RequestConfig): Promise<T>;
    }
    interface Config {
        baseURL?: string;
        /** @deprecated use `baseURL` instead */
        endpoint?: string;
        headers?: Dict;
        timeout?: number;
    }
    interface RequestConfig extends Config {
        method?: Method;
        params?: Dict;
        data?: any;
        keepAlive?: boolean;
        redirect?: RequestRedirect;
        signal?: AbortSignal;
        responseType?: keyof ResponseTypes;
        validateStatus?: (status: number) => boolean;
    }
    interface Response<T = any> {
        url: string;
        data: T;
        status: number;
        statusText: string;
        headers: Headers;
    }
    type Error = HTTPError;
    namespace Error {
        type Code = 'ETIMEDOUT';
    }
}
export interface HTTP {
    <K extends keyof HTTP.ResponseTypes>(url: string, config: HTTP.RequestConfig & {
        responseType: K;
    }): Promise<HTTP.Response<HTTP.ResponseTypes[K]>>;
    <T = any>(url: string | URL, config?: HTTP.RequestConfig): Promise<HTTP.Response<T>>;
    <T = any>(method: HTTP.Method, url: string | URL, config?: HTTP.RequestConfig): Promise<HTTP.Response<T>>;
    config: HTTP.Config;
    get: HTTP.Request1;
    delete: HTTP.Request1;
    patch: HTTP.Request2;
    post: HTTP.Request2;
    put: HTTP.Request2;
}
export declare class HTTP extends Service<HTTP.Config> {
    static Error: typeof HTTPError;
    /** @deprecated use `HTTP.Error.is()` instead */
    static isAxiosError: typeof HTTPError.is;
    static [Service.provide]: string;
    static [Service.immediate]: boolean;
    private _decoders;
    constructor(config?: HTTP.Config);
    constructor(ctx: Context, config?: HTTP.Config);
    static mergeConfig: (target: HTTP.Config, source?: HTTP.Config) => {
        headers: {
            [x: string]: any;
        };
        baseURL?: string | undefined;
        endpoint?: string | undefined;
        timeout?: number | undefined;
    };
    decoder<K extends keyof HTTP.ResponseTypes>(type: K, decoder: (raw: Response) => Awaitable<HTTP.ResponseTypes[K]>): () => boolean;
    extend(config?: HTTP.Config): any;
    resolveConfig(init?: HTTP.RequestConfig): HTTP.RequestConfig;
    resolveURL(url: string | URL, config: HTTP.RequestConfig): URL;
    defaultDecoder(response: Response): Promise<any>;
    [Service.invoke](...args: any[]): Promise<HTTP.Response<any>>;
    head(url: string, config?: HTTP.Config): Promise<Headers>;
    /** @deprecated use `ctx.http()` instead */
    axios<T = any>(config: {
        url: string;
    } & HTTP.RequestConfig): Promise<HTTP.Response<T>>;
    axios<T = any>(url: string, config?: HTTP.RequestConfig): Promise<HTTP.Response<T>>;
    ws(url: string | URL, init?: HTTP.Config): import("ws");
}
export default HTTP;
