"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/adapter/node.ts
var node_exports = {};
__export(node_exports, {
  loadFile: () => loadFile,
  lookup: () => import_promises2.lookup
});
module.exports = __toCommonJS(node_exports);
var import_node_url = require("node:url");
var import_node_path = require("node:path");
var import_file_type = require("file-type");
var import_promises = require("node:fs/promises");
var import_promises2 = require("node:dns/promises");
async function loadFile(url) {
  if (url.startsWith("file://")) {
    const data = await (0, import_promises.readFile)((0, import_node_url.fileURLToPath)(url));
    const result = await (0, import_file_type.fromBuffer)(data);
    return { mime: result?.mime, filename: (0, import_node_path.basename)(url), data };
  }
}
__name(loadFile, "loadFile");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  loadFile,
  lookup
});
