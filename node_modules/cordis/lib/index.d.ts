import * as core from '@cordisjs/core';
import { Logger } from '@cordisjs/logger';
export * from '@cordisjs/core';
export { default as Schema, default as z } from 'schemastery';
export { Logger } from '@cordisjs/logger';
export { TimerService } from '@cordisjs/timer';
export interface Events<C extends Context = Context> extends core.Events<C> {
}
export declare namespace Context {
    type Associate<P extends string, C extends Context = Context> = core.Context.Associate<P, C>;
}
export interface Context {
    [Context.events]: Events<this>;
}
export declare class Context extends core.Context {
    baseDir: string;
    constructor(config?: any);
}
export declare abstract class Service<T = unknown, C extends Context = Context> extends core.Service<T, C> {
    /** @deprecated use `this.ctx.logger` instead */
    logger: Logger;
    constructor(...args: core.Spread<T>);
    constructor(ctx: C, ...args: core.Spread<T>);
    constructor(ctx: C, name: string, immediate?: boolean);
    [core.Service.setup](): void;
}
export default function (): void;
